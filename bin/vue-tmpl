#! /usr/bin/env node
var path = require('path')
var ora = require('ora')
var program = require('commander')
var chalk = require('chalk')
var home = require('user-home')
var tildify = require('tildify')
var inquirer = require('inquirer')
var download = require('download-git-repo')
var exists = require('fs').existsSync
var rm = require('rimraf').sync
var logger = require('../lib/logger')
var checkVersion = require('../lib/check-version')
var generate = require('../lib/generate')


/**
 * Usage.
 */

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')

/**
 * Help.
 */

program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with an official template'))
  console.log('    $ vue-tmpl init webpack my-project')
  console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()


var template = program.args[1]
var rawName = program.args[2]
var to = path.resolve(rawName || '.')


var tmp = path.join(home, '.vue-tmpls', template.replace(/\//g, '-'))
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: 'Target directory exists. Continue?',
    name: 'ok'
  }], function (answers) {
    if (answers.ok) {
      run()
    }
  })
} else {
  run()
}

function run () {
  if (/^[./]|(^[a-zA-Z]:)/.test(template)) {
    // local

    var templatePath = path.isAbsolute(template) ? template : path.normalize(path.join(process.cwd(), template))
    if (exists(templatePath)) {

      generate(rawName, templatePath, to, function (err) {
        if (err) logger.fatal(err)
        console.log()
        logger.success('Generated "%s".', rawName)
      })
    } else {
      logger.fatal('Local template "%s" not found.', template)
    }
  } else {
    checkVersion(function () {
        downloadAndGenerate(template)
    })
  }
}

function downloadAndGenerate (template) {
  var spinner = ora('downloading template')
  spinner.start()
  // Remove if local template exists
  if (exists(tmp)) rm(tmp)

  download(template, tmp, function (err) {
    spinner.stop()
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    generate(rawName, tmp, to, function (err) {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', rawName)
    })
  })
}